[package]
name = "snaprag"
version = "0.1.0"
edition = "2021"
description = "A Farcaster data synchronization and RAG (Retrieval-Augmented Generation) library"
license = "MIT"
repository = "https://github.com/your-org/snaprag"
keywords = ["farcaster", "rag", "synchronization", "database", "vector-search"]
categories = ["database", "web-programming", "data-structures"]

# Library configuration
[lib]
name = "snaprag"
path = "src/lib.rs"

# Binary configuration
[[bin]]
name = "snaprag"
path = "src/main.rs"

[dependencies]
tokio = { version = "1.0", features = ["full"] }
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "postgres", "chrono", "uuid", "json"] }
pgvector = { version = "0.3", features = ["sqlx", "serde"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = { version = "0.4", features = ["serde"] }
uuid = { version = "1.0", features = ["v4", "serde"] }
dashmap = "6.0"
anyhow = "1.0"
thiserror = "1.0"
toml = "0.8"
config = "0.14"
url = "2.4"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-appender = "0.2"
protobuf = "2.28"
http = "1.0"
sha2 = "0.10"
base64 = "0.21"
hex = "0.4"
reqwest = { version = "0.11", features = ["json"] }
tempfile = "3.0"
clap = { version = "4.0", features = ["derive"] }
tonic = "0.10"
prost = "0.12"
libc = "0.2"
futures = "0.3"
rust_decimal = { version = "1.0", features = ["serde"] }
ethers = { version = "2.0", features = ["abigen", "ws"] }
# Web server dependencies
axum = { version = "0.7", features = ["json", "macros"] }
tower = { version = "0.4", features = ["timeout", "limit"] }
tower-http = { version = "0.5", features = ["cors", "trace", "compression-gzip"] }
hyper = { version = "1.0", features = ["full"] }
tokio-util = "0.7"
rayon = "1.8"  # Parallel processing for CPU-intensive tasks

# Local GPU embedding dependencies (optional)
# Note: Platform-specific features are defined in target-specific sections below
candle-core = { version = "0.9", optional = true }
candle-nn = { version = "0.9", optional = true }
candle-transformers = { version = "0.9", optional = true }
tokenizers = { version = "0.20", optional = true }
hf-hub = { version = "0.3", features = ["tokio"], optional = true }

# x402 payment protocol (local development)
# NOTE: Switch to crate or git dependency for production
# rust-x402 = "0.1"  # Production
# rust-x402 = { git = "https://github.com/RyanKung/x402_rs" }  # Git
rust-x402 = { path = "../rust-x402", features = ["axum"], optional = true }

[features]
default = []
payment = ["rust-x402"]
local-gpu = ["candle-core", "candle-nn", "candle-transformers", "tokenizers", "hf-hub"]

# Platform-specific GPU features
# These override the base candle-core dependency with platform-specific features
[target.'cfg(target_os = "macos")'.dependencies]
candle-core = { version = "0.9", features = ["metal"], optional = true }
candle-nn = { version = "0.9", features = ["metal"], optional = true }
candle-transformers = { version = "0.9", features = ["metal"], optional = true }

[target.'cfg(target_os = "linux")'.dependencies]
candle-core = { version = "0.9", features = ["cuda"], optional = true }
candle-nn = { version = "0.9", features = ["cuda"], optional = true }
candle-transformers = { version = "0.9", features = ["cuda"], optional = true }

[target.'cfg(target_os = "windows")'.dependencies]
candle-core = { version = "0.9", features = ["cuda"], optional = true }
candle-nn = { version = "0.9", features = ["cuda"], optional = true }
candle-transformers = { version = "0.9", features = ["cuda"], optional = true }

[build-dependencies]
protobuf-codegen-pure = "2.28"
tonic-build = "0.10"

[lints.rust]
# Ignore warnings from generated protobuf code
unused_lifetimes = "allow"
elided-lifetimes-in-paths = "allow"
unused_imports = "allow"
unused_variables = "allow"
dead_code = "allow"

# Strict settings for tests
[profile.test]
# Enable debug info for better test debugging
debug = true
# Enable overflow checks for tests
overflow-checks = true

# Strict clippy configuration for tests
[lints.clippy]
# Allow warnings in generated code but be strict in our code
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }

# Only allow warnings for generated protobuf code and external dependencies
# All other code must pass strict clippy checks

# External dependencies - truly cannot control without breaking changes
multiple_crate_versions = "allow"  # Requires dependency upgrades (ethers crate conflicts)

# Temporarily allow type_complexity (requires massive refactoring to fix ~10 complex tuple types)
type_complexity = "allow"

