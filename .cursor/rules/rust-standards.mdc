---
description: Rust coding standards and best practices for SnapRAG
globs:
  - 'src/**/*.rs'
  - 'tests/**/*.rs'
  - 'benches/**/*.rs'
alwaysApply: false
---

# Rust Standards

## Code Formatting
- Always run `cargo fmt` before committing
- Use `cargo clippy` with `-D warnings` flag
- Follow standard Rust naming conventions (snake_case for functions/variables, PascalCase for types)

## Testing
- Write comprehensive unit tests for all public functions
- Use proper test database setup and teardown
- Ensure cross-platform compatibility in tests
- Run `cargo test --all-features` before committing
- Test gRPC client error handling and reconnection logic
- Verify shard processing and state management logic

## Error Handling
- Use `anyhow::Result<T>` for error handling
- Provide meaningful error messages
- Log errors appropriately using the `log` crate
- Handle network errors gracefully
- Implement proper retry logic for gRPC connections
- Handle database connection failures with appropriate fallbacks

## Performance
- Avoid unnecessary allocations
- Use `&str` instead of `String` when possible
- Consider using `Cow<str>` for string handling
- Profile performance-critical code
- Optimize database queries and connection pooling
- Use efficient data structures for shard processing

## Database and State Management
- Use proper transaction handling for database operations
- Implement proper state persistence and recovery
- Handle concurrent access to shared state safely
- Use appropriate database connection pooling
- Implement proper migration rollback strategies